{% extends 'base.html.twig' %}

{% block body %}
    {% for type, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ type }} alert-dismissible fade show">
                {{ message }}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        {% endfor %}
    {% endfor %}

    <div class="modal fade" id="newPostModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Post</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    {{ include('post/_Post.html.twig', {form: create_form}) }}
                </div>
            </div>
        </div>
    </div>

    <div class="forum-container">
        <div class="forum-wrapper" 
             x-data="{
                activeLeftTab: 'posts',
                activeRightTab: 'forum-info',
                selectedPost: null,
                currentUserEmail: '{{ app.user ? app.user.mail : null }}',
                selectedForumId: '{{ currentForum ? currentForum.ForumId : '' }}',
                autoComment: null,
                loadPostDetails(postElement) {
                    const post = {
                        postId: postElement.postId,
                        type: postElement.type,
                        announcementTitle: postElement.announcementTitle,
                        surveyQuestion: postElement.surveyQuestion,
                        announcementContent: postElement.announcementContent,
                        announcementTags: postElement.announcementTags,
                        surveyTags: postElement.surveyTags,
                        dateCreation: postElement.dateCreation,
                        dateModification: postElement.dateModification,
                        cheminFichier: postElement.cheminFichier
                    };
                    this.selectedPost = post;
                    this.activeLeftTab = 'comments';
                    this.autoComment = null;
                    
                    fetch(`/api/ai/post/${post.postId}/auto-comment`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.autoComment = data.comment;
                        } else {
                            this.autoComment = 'Error loading comment.';
                        }
                    })
                    .catch(() => {
                        this.autoComment = 'Error loading comment.';
                    });
                },
                handleVote(postId, voteType) {
                    fetch(`/api/post/${postId}/vote`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ voteType: voteType })
                    })
                    .then(response => response.json())
                    .then(data => {
                        const postElement = document.querySelector(`[data-post-id='${postId}']`);
                        if (postElement) {
                            postElement.querySelector('.upvote-count').textContent = data.upvotes;
                            postElement.querySelector('.downvote-count').textContent = data.downvotes;
                        }
                    })
                    .catch(error => console.error('Error:', error));
                },
                reportPost(postId) {
                    if (!this.currentUserEmail) {
                        alert('Please log in to report posts.');
                        return;
                    }
                    
                    const reason = prompt('Please enter the reason for reporting this post:');
                    if (!reason) return;
                    
                    fetch(`/api/post/${postId}/report`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            reason: reason,
                            userEmail: this.currentUserEmail
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        alert('Post reported successfully.');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error reporting post. Please try again.');
                    });
                }
             }">
            
            <!-- Left Pane -->
            <div class="forum-left-pane">
                <div class="forum-tab-container">


                    <!-- Posts Tab Content -->
                    <div x-show="activeLeftTab === 'posts'" class="forum-tab-content">
                        <div class="forum-search-bar">
                            <div class="search-form">
                                <input type="text" 
                                       name="search"
                                       value="{{ searchTerm }}"
                                       placeholder="Search posts..." 
                                       class="forum-search-field"
                                       data-autocomplete-url="{{ path('app_autocomplete') }}"
                                       autocomplete="on">
                                <input type="hidden" name="forum" value="{{ currentForum ? currentForum.ForumId : '' }}">
                                <input type="hidden" name="sort" value="{{ sortBy }}">
                                <button type="button" class="search-button" onclick="handleSearch()">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="forum-scroll-container">
                            {% include 'post/_posts.html.twig' with {'posts': posts} %}
                        </div>
                    </div>

                    <!-- Comments Tab Content -->
                    <div x-show="activeLeftTab === 'comments'" class="forum-tab-content">
                        <button @click="activeLeftTab = 'posts'" class="forum-back-button">
                            <i class="fas fa-arrow-left"></i> Back to Posts
                        </button>
                        
                        <template x-if="selectedPost">
                            <div class="forum-post-item">
                                <div class="post-header">
                                    <div class="post-header-top">
                                        <h2 class="post-title" x-text="selectedPost.type === 'announcement' ? 
                                            selectedPost.announcementTitle : selectedPost.surveyQuestion"></h2>
                                        <a :href="'/front/post/pdf/' + selectedPost.postId" 
                                           class="pdf-export-button" 
                                           target="_blank">
                                            <i class="fas fa-file-pdf"></i> Export PDF
                                        </a>
                                    </div>
                                    
                                    <div class="post-meta">
                                        <span class="post-date" x-text="
                                            selectedPost.dateModification && selectedPost.dateModification !== selectedPost.dateCreation
                                                ? 'Edited on: ' + new Date(selectedPost.dateModification).toLocaleString()
                                                : 'Posted on: ' + new Date(selectedPost.dateCreation).toLocaleString()
                                        "></span>
                                    </div>
                                </div>

                                <template x-if="selectedPost.cheminFichier">
                                    <div class="post-image-container">
                                        <img :src="'/uploads/' + selectedPost.cheminFichier" 
                                             alt="Post image" class="post-image-preview">
                                    </div>
                                </template>

                                <template x-if="selectedPost.type === 'announcement'">
                                    <div class="post-content">
                                        <div class="content-section">
                                            <h3 class="section-title">Content</h3>
                                            <p class="content-text" x-text="selectedPost.announcementContent || 'No content available'"></p>
                                        </div>
                                        <div class="content-section">
                                            <h3 class="section-title">Tags</h3>
                                            <div class="tags-container">
                                                <template x-if="selectedPost.announcementTags">
                                                    <template x-for="tag in selectedPost.announcementTags.split(',').filter(t => t.trim())">
                                                        <span class="tag" x-text="tag.trim()"></span>
                                                    </template>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </template>

                                <template x-if="selectedPost.type === 'survey'">
                                    <div class="post-content">
                                        <div class="content-section">
                                            <h3 class="section-title">Question</h3>
                                            <p class="content-text" x-text="selectedPost.surveyQuestion || 'No question available'"></p>
                                        </div>
                                        <div class="content-section">
                                            <h3 class="section-title">Tags</h3>
                                            <div class="tags-container">
                                                <template x-if="selectedPost.surveyTags">
                                                    <template x-for="tag in selectedPost.surveyTags.split(',').filter(t => t.trim())">
                                                        <span class="tag" x-text="tag.trim()"></span>
                                                    </template>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                            </div>
                        </template>
                        
                        <!-- Auto-comment section -->
                        <div class="auto-comment-section" x-show="selectedPost">
                            <h3>Bot Mod</h3>
                            <div class="auto-comment-container">
                                <div class="auto-comment" x-text="autoComment ? autoComment.replace(/\\n/g, '\n') : 'Loading comment...'" style="white-space: pre-line;">
                                </div>
                            </div>
                        </div>
                        
                        <!-- Comments section -->
                        <div class="comments-section" x-show="selectedPost">
                            <h3>Comments</h3>
                            <div id="disqus_thread"></div>
                            <script>
                                var disqus_config = function () {
                                    this.page.url = '{{ disqus_config.url|default(app.request.uri) }}';
                                    this.page.identifier = '{{ disqus_config.identifier|default('general') }}';
                                    this.page.title = '{{ disqus_config.title|default('TripToGo Forum') }}';
                                };

                                (function() {
                                    var d = document, s = d.createElement('script');
                                    s.src = 'https://{{ disqus_config.shortname|default('triptogo-1') }}.disqus.com/embed.js';
                                    s.setAttribute('data-timestamp', +new Date());
                                    (d.head || d.body).appendChild(s);
                                })();
                            </script>
                            <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Pane -->
            <div class="forum-right-pane">
                <div class="forum-tab-container">
                    <!-- Tab Buttons -->
                    <div class="forum-tab-buttons">
                        <button @click="activeRightTab = 'forum-info'" 
                                :class="{ 'active-tab': activeRightTab === 'forum-info' }">
                            Forum Info
                        </button>
                    </div>

                    <!-- Forum Info Content -->
                    <div x-show="activeRightTab === 'forum-info'" class="forum-tab-content">
                        <select class="forum-select" x-model="selectedForumId"
                                @change="window.location.href = '?forum=' + selectedForumId">
                            <option value="">Select Forum</option>
                            {% for forum in forums %}
                                <option value="{{ forum.forumId }}" 
                                        {% if currentForum is not null and currentForum.forumId == forum.forumId %}selected{% endif %}>
                                    {{ forum.name|default('Unnamed Forum') }}
                                </option>
                            {% else %}
                                <option value="">No forums available</option>
                            {% endfor %}
                        </select>
                        
                        {% if currentForum is defined and currentForum is not null %}
                        <div class="forum-info">
                            <h3>{{ currentForum.name }}</h3>
                            <div class="forum-description">
                                {{- currentForum.description|default('No description available') -}}
                            </div>
                            
                            <button type="button" class="forum-submit-button" data-toggle="modal" data-target="#newPostModal">
                                Create Post
                            </button>
                            
                            <div class="forum-stats">
                                {% if currentForum.isPrivate %}
                                <span class="stat-item">
                                    Members: {{ currentForum.nbr_members|default(0) }}
                                </span>
                                {% endif %}
                                
                                <span class="stat-item">
                                    Created: {{ currentForum.dateCreation|date('Y-m-d') }}
                                </span>
                                <span class="stat-item">
                                    Posts: {{ currentForum.post_count|default(0) }}
                                </span>
                            </div>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <link rel="stylesheet" href="{{ asset('assets/css/stylesFP.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <style>
        .forum-container {
            max-width: 95%;
            margin: 0 auto;
            padding: 20px 40px;
            background-color: #f8f9fa;
            min-height: 100vh;
        }
        
        .forum-wrapper {
            display: grid;
            grid-template-columns: 70% 30%;
            gap: 30px;
            margin: 0 20px;
        }
        
        .forum-left-pane, .forum-right-pane {
            background: #f5f5f5;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: 1px solid rgba(0,0,0,0.1);
            transition: transform 0.2s;
            padding: 20px;
        }
        
        .forum-left-pane:hover, .forum-right-pane:hover {
            transform: translateY(-5px);
        }
        
        .forum-tab-buttons {
            display: flex;
            padding: 15px;
            gap: 10px;
            background: #f0f0f0;
        }
        
        .forum-tab-buttons button {
            padding: 12px 24px;
            font-size: 16px;
            color: #495057;
            background: transparent;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .forum-tab-buttons button.active-tab {
            background: #e78d1e;
            color: white;
        }
        
        .forum-post-item {
            background: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            transition: transform 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .forum-post-item:hover {
            transform: translateY(-5px);
        }
        
        .post-title {
            font-size: 18px;
            color: #007bff;
            margin-bottom: 10px;
            line-height: 1.4;
        }
        
        .post-meta {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .post-tags {
            color: #007bff;
            font-size: 14px;
        }
        
        .post-date {
            color: #666;
            font-size: 12px;
        }
        
        .post-image img {
            max-width: 100%;
            border-radius: 8px;
            margin: 15px 0;
        }
        
        .vote-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .vote-controls button {
            width: 40px;
            height: 40px;
            font-size: 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .vote-controls button:hover:not(.disabled) {
            background: #0056b3;
            transform: scale(1.1);
        }
        
        .vote-controls button.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .vote-count {
            font-size: 20px;
            color: #007bff;
            font-weight: bold;
        }
        
        .post-actions {
            display: flex;
            gap: 10px;
        }
        
        .post-actions button {
            padding: 8px 16px;
            font-size: 14px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .view-comments-btn {
            background: rgba(42, 131, 45, 0.6);
            color: white;
        }
        
        .signal-btn {
            background: #d80f5d;
            color: white;
        }
        
        .edit-post-btn {
            background: #4444ff;
            color: white;
        }
        
        .delete-post-btn {
            background: #ff4444;
            color: white;
        }
        
        .post-actions button:hover:not(.disabled) {
            transform: scale(1.05);
            filter: brightness(1.1);
        }
        
        .post-actions button.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .forum-back-button {
            background: none;
            border: none;
            color: #e78d1e;
            font-size: 16px;
            cursor: pointer;
            padding: 10px 0;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .forum-back-button:hover {
            color: #ff9f2f;
        }
        
        .no-posts-message, .no-forum-selected {
            background: #ffffff;
            padding: 30px;
            border-radius: 8px;
            text-align: center;
            color: #495057;
            margin: 30px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .post-image-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }

        .post-image-preview {
            max-width: 100%;
            max-height: 400px;
            object-fit: contain;
            border-radius: 8px;
        }

        .post-content {
            margin: 20px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .content-section {
            margin-bottom: 20px;
        }

        .section-title {
            color: #e78d1e;
            font-size: 18px;
            margin-bottom: 10px;
        }

        .content-text {
            color: #666;
            line-height: 1.5;
            margin: 0;
            font-size: 14px;
        }

        .tags-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .tag {
            background: #e78d1e;
            color: #ffffff;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 14px;
        }

        .post-stats {
            display: flex;
            gap: 20px;
            color: #e78d1e;
            font-size: 14px;
        }

        .post-actions {
            display: flex;
            gap: 10px;
        }

        .post-actions button {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .post-actions button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .search-form {
            display: flex;
            gap: 10px;
            align-items: center;
            position: relative;
        }

        .forum-search-field {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #e78d1e;
            border-radius: 4px;
            background: #fff;
            color: #495057;
            font-size: 14px;
        }

        .autocomplete-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: #fff;
            border: 1px solid #e78d1e;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            margin-top: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .autocomplete-suggestion {
            padding: 8px 12px;
            cursor: pointer;
            color: #495057;
            transition: background-color 0.2s ease;
        }

        .autocomplete-suggestion:hover {
            background: #e78d1e;
            color: white;
        }

        .autocomplete-suggestion.active {
            background: #e78d1e;
            color: white;
        }

        .search-button {
            background: #e78d1e;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .search-button:hover {
            background: #ff9f2f;
        }

        .sort-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .sort-controls label {
            color: #e0e0e0;
        }

        .forum-combo-box {
            background: #fff;
            color: #495057;
            border: 1px solid #e78d1e;
            padding: 8px;
            border-radius: 4px;
            cursor: pointer;
        }

        .forum-combo-box:hover {
            border-color: #ff9f2f;
        }

        .forum-info {
            background: #ffffff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .forum-info h3 {
            color: #e78d1e;
            margin-bottom: 15px;
            font-size: 20px;
        }

        .forum-description {
            background: #ffffff;
            border: 1px solid #e78d1e;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .forum-stats {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        .stat-item {
            background: #ffffff;
            border: 1px solid #e78d1e;
            color: #e78d1e;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
        }

        .forum-submit-button {
            background: #e78d1e;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            margin-top: 20px;
        }

        .forum-submit-button:hover {
            background: #ff9f2f;
            transform: translateY(-2px);
        }

        /* Auto-comment Styles */
        .auto-comment-section {
            margin: 20px 0;
            background: #ffffff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .auto-comment-container {
            border: 1px solid #e78d1e;
            border-radius: 8px;
            overflow: hidden;
        }

        .auto-comment {
            padding: 15px;
            background: #f9f9f9;
            line-height: 1.4;
            color: #333;
        }

        .auto-comment-loading {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 15px;
            color: #666;
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 3px solid #f0f0f0;
            border-top: 3px solid #e78d1e;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .forum-container {
                padding: 20px 15px;
            }
            
            .forum-wrapper {
                margin: 0;
                gap: 20px;
            }
        }

        .post-header-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .pdf-export-button {
            background: #e78d1e;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
        }

        .pdf-export-button:hover {
            background: #ff9f2f;
            transform: translateY(-2px);
        }

        .pdf-export-button i {
            font-size: 16px;
        }
    </style>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInputs = document.querySelectorAll('[data-autocomplete-url]');
        
        searchInputs.forEach(function(input) {
            let timeout = null;
            let controller = null;
            
            input.addEventListener('input', function() {
                clearTimeout(timeout);
                
                if (controller) {
                    controller.abort();
                }
                
                const query = this.value.trim();
                if (query.length < 2) {
                    hideSuggestions(this);
                    return;
                }
                
                timeout = setTimeout(() => {
                    controller = new AbortController();
                    
                    const url = new URL(this.dataset.autocompleteUrl, window.location.origin);
                    url.searchParams.append('q', query);
                    url.searchParams.append('source', 'google');
                    
                    console.log('Fetching suggestions for:', query);
                    
                    fetch(url, {
                        signal: controller.signal,
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Received suggestions:', data);
                        if (data.error) {
                            console.error('Autocomplete error:', data.error);
                            return;
                        }
                        showSuggestions(this, data.results);
                    })
                    .catch(error => {
                        if (error.name !== 'AbortError') {
                            console.error('Autocomplete error:', error);
                            showSuggestions(this, [{
                                name: query,
                                title: query,
                                value: query
                            }]);
                        }
                    });
                }, 300);
            });
            
            input.addEventListener('blur', function() {
                setTimeout(() => {
                    hideSuggestions(this);
                }, 200);
            });
            
            input.addEventListener('keydown', function(e) {
                const suggestions = this.nextElementSibling;
                if (!suggestions || !suggestions.classList.contains('autocomplete-suggestions')) {
                    return;
                }
                
                const active = suggestions.querySelector('.autocomplete-suggestion.active');
                
                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        if (active) {
                            const next = active.nextElementSibling;
                            if (next) {
                                active.classList.remove('active');
                                next.classList.add('active');
                            }
                        } else {
                            suggestions.querySelector('.autocomplete-suggestion')?.classList.add('active');
                        }
                        break;
                        
                    case 'ArrowUp':
                        e.preventDefault();
                        if (active) {
                            const prev = active.previousElementSibling;
                            if (prev) {
                                active.classList.remove('active');
                                prev.classList.add('active');
                            }
                        }
                        break;
                        
                    case 'Enter':
                        e.preventDefault();
                        if (active) {
                            const suggestion = JSON.parse(active.dataset.suggestion);
                            this.value = suggestion.name || suggestion.title || suggestion.value;
                            hideSuggestions(this);
                            handleSearch();
                        }
                        break;
                        
                    case 'Escape':
                        hideSuggestions(this);
                        break;
                }
            });
        });
        
        function showSuggestions(input, suggestions) {
            hideSuggestions(input);
            
            if (!suggestions || !suggestions.length) {
                return;
            }
            
            const container = document.createElement('div');
            container.className = 'autocomplete-suggestions';
            
            suggestions.forEach(suggestion => {
                const div = document.createElement('div');
                div.className = 'autocomplete-suggestion';
                
                const suggestionText = suggestion.name || suggestion.title || suggestion.value;
                div.textContent = suggestionText;
                
                div.dataset.suggestion = JSON.stringify(suggestion);
                
                div.addEventListener('click', () => {
                    input.value = suggestionText;
                    hideSuggestions(input);
                    handleSearch();
                });
                
                container.appendChild(div);
            });
            
            input.parentNode.insertBefore(container, input.nextSibling);
        }
        
        function hideSuggestions(input) {
            const suggestions = input.nextElementSibling;
            if (suggestions && suggestions.classList.contains('autocomplete-suggestions')) {
                suggestions.remove();
            }
        }
    });

    function handleSearch() {
        const searchInput = document.querySelector('.forum-search-field');
        const forumInput = document.querySelector('input[name="forum"]');
        const sortInput = document.querySelector('input[name="sort"]');
        const searchTerm = searchInput.value.trim();
        
        const url = new URL(window.location.href);
        url.searchParams.set('search', searchTerm);
        url.searchParams.set('forum', forumInput.value);
        url.searchParams.set('sort', sortInput.value);
        
        window.history.pushState({}, '', url);
        
        fetch(`/front/post/update-posts?${url.searchParams.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.querySelector('.forum-scroll-container').innerHTML = data.html;
                } else {
                    document.querySelector('.forum-scroll-container').innerHTML = '<div class="alert alert-danger">Error updating content. Please try again.</div>';
                }
            })
            .catch(error => {
                console.error('Error updating content:', error);
                document.querySelector('.forum-scroll-container').innerHTML = '<div class="alert alert-danger">Error updating content. Please try again.</div>';
            });
    }
    </script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.min.js"></script>
{% endblock %}