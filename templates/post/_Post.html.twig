{% form_theme form 'bootstrap_4_layout.html.twig' %}

<style>
    .form-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .is-valid {
        border-color: #28a745 !important;
    }

    .error-label {
        color: #dc3545;
        display: none;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .btn-disabled {
        background-color: #6c757d !important;
        border-color: #6c757d !important;
        cursor: not-allowed;
        opacity: 0.65;
    }

    .field-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }

    .field-success {
        color: #28a745;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }
</style>

{{ form_start(form, {'attr': {'novalidate': 'novalidate', 'id': 'post-form'}}) }}
    <div class="form-group">
        {{ form_label(form.type) }}<br>
        {{ form_widget(form.type, {
            'attr': {
                'class': 'form-control' ~ (form.type.vars.valid ? '' : ' is-invalid'),
                'onchange': 'handlePostTypeChange(this.value)',
                'required': 'required'
            }
        }) }}<br>
        <div class="field-error" id="type-error"></div>
        {{ form_errors(form.type, {'attr': {'class': 'form-error'}}) }}
    </div>

    <!-- Common Fields -->
    <div class="form-group">
        {{ form_label(form.id_user) }}<br>
        {{ form_widget(form.id_user, {
            'attr': {
                'class': 'form-control',
                'required': 'required'
            }
        }) }}<br>
        <div class="field-error" id="user-error"></div>
        {{ form_errors(form.id_user) }}
    </div>

    <div class="form-group">
        {{ form_label(form.forum_id) }}<br>
        {{ form_widget(form.forum_id, {
            'attr': {
                'class': 'form-control',
                'required': 'required'
            }
        }) }}<br>
        <div class="field-error" id="forum-error"></div>
        {{ form_errors(form.forum_id) }}
    </div>

    <div class="form-group">
        {{ form_label(form.chemin_fichier) }}<br>
        {% if form.vars.data and form.vars.data.cheminFichier %}
            <div class="mb-2">
                Current image:
                <img src="{{ asset('uploads/' ~ form.vars.data.cheminFichier) }}" 
                     class="image-preview" style="max-width: 200px;">
            </div>
        {% endif %}
        {{ form_widget(form.chemin_fichier, {
            'attr': {
                'class': 'form-control-file',
                'accept': '.jpg,.jpeg,.png',
                'onchange': 'validateFile(this)',
                'required': form.vars.data and form.vars.data.postId ? null : 'required'
            }
        }) }}<br>
        <div class="field-error" id="file-error"></div>
        {{ form_errors(form.chemin_fichier) }}
    </div>

    {% if form.status is defined %}
    <div class="form-group">
        {{ form_label(form.status) }}<br>
        {{ form_widget(form.status, {'attr': {'class': 'form-control'}}) }}<br>
        {{ form_errors(form.status) }}
    </div>
    {% endif %}

    <!-- Survey Fields -->
    <div id="survey-fields" class="post-type-fields" style="display: none;">
        <div class="form-group">
            {{ form_label(form.survey_question) }}<br>
            {{ form_widget(form.survey_question, {
                'attr': {
                    'class': 'form-control',
                    'rows': 3,
                    'onkeyup': 'validateSurveyQuestion(this.value)',
                    'required': 'required'
                }
            }) }}<br>
            <div class="field-error" id="survey-question-error"></div>
            <div class="field-success" id="survey-question-success">Question valide</div>
            {{ form_errors(form.survey_question) }}
        </div>

        <div class="form-group">
            {{ form_label(form.survey_tags) }}<br>
            {{ form_widget(form.survey_tags, {
                'attr': {
                    'class': 'form-control',
                    'onkeyup': 'validateTags(this.value, "survey")',
                    'required': 'required'
                }
            }) }}<br>
            <div class="field-error" id="survey-tags-error"></div>
            <div class="field-success" id="survey-tags-success">Tags valides</div>
            {{ form_errors(form.survey_tags) }}
        </div>
    </div>

    <!-- Announcement Fields -->
    <div id="announcement-fields" class="post-type-fields" style="display: none;">
        <div class="form-group">
            {{ form_label(form.announcement_title) }}<br>
            {{ form_widget(form.announcement_title, {
                'attr': {
                    'class': 'form-control',
                    'onkeyup': 'validateAnnouncementTitle(this.value)',
                    'required': 'required'
                }
            }) }}<br>
            <div class="field-error" id="announcement-title-error"></div>
            <div class="field-success" id="announcement-title-success">Titre valide</div>
            {{ form_errors(form.announcement_title) }}
        </div>

        <div class="form-group">
            {{ form_label(form.announcement_content) }}<br>
            {{ form_widget(form.announcement_content, {
                'attr': {
                    'class': 'form-control',
                    'rows': 5,
                    'onkeyup': 'validateAnnouncementContent(this.value)',
                    'required': 'required'
                }
            }) }}<br>
            <div class="field-error" id="announcement-content-error"></div>
            <div class="field-success" id="announcement-content-success">Contenu valide</div>
            {{ form_errors(form.announcement_content) }}
        </div>

        <div class="form-group">
            {{ form_label(form.announcement_tags) }}<br>
            {{ form_widget(form.announcement_tags, {
                'attr': {
                    'class': 'form-control',
                    'onkeyup': 'validateTags(this.value, "announcement")',
                    'required': 'required'
                }
            }) }}<br>
            <div class="field-error" id="announcement-tags-error"></div>
            <div class="field-success" id="announcement-tags-success">Tags valides</div>
            {{ form_errors(form.announcement_tags) }}
        </div>
    </div>

    <div class="modal-footer">
        <button type="submit" class="btn btn-primary" id="submit-button" disabled>
            {{ form.vars.data and form.vars.data.postId ? 'Update' : 'Create' }}
        </button>
    </div>
{{ form_end(form) }}

<script>
    let formValid = {
        type: false,
        title: false,
        content: false,
        tags: false,
        question: false,
        surveyTags: false,
        file: false
    };

    function handlePostTypeChange(type) {
        // Hide all type-specific fields
        document.querySelectorAll('.post-type-fields').forEach(el => {
            el.style.display = 'none';
        });

        // Update type validation
        formValid.type = type !== '';
        
        // Show fields for selected type
        if (type === 'survey') {
            document.getElementById('survey-fields').style.display = 'block';
        } else if (type === 'announcement') {
            document.getElementById('announcement-fields').style.display = 'block';
        }

        updateSubmitButton();
    }

    function validateAnnouncementTitle(title) {
        const field = document.getElementById('post_announcement_title');
        const errorLabel = document.getElementById('announcement-title-error');
        
        if (!title || title.trim() === '') {
            showError(field, errorLabel, "Le titre est requis");
            formValid.title = false;
        } else if (title.length > 50) {
            showError(field, errorLabel, "Le titre ne doit pas dépasser 50 caractères");
            formValid.title = false;
        } else {
            hideError(field, errorLabel);
            formValid.title = true;
        }
        updateSubmitButton();
    }

    function validateAnnouncementContent(content) {
        const field = document.getElementById('post_announcement_content');
        const errorLabel = document.getElementById('announcement-content-error');
        
        if (!content || content.trim() === '') {
            showError(field, errorLabel, "Le contenu est requis");
            formValid.content = false;
        } else if (content.length > 500) {
            showError(field, errorLabel, "Le contenu ne doit pas dépasser 500 caractères");
            formValid.content = false;
        } else {
            hideError(field, errorLabel);
            formValid.content = true;
        }
        updateSubmitButton();
    }

    function validateTags(tags, type) {
        const field = document.getElementById(`post_${type}_tags`);
        const errorLabel = document.getElementById(`${type}-tags-error`);
        
        if (!tags || tags.trim() === '') {
            showError(field, errorLabel, "Les tags sont requis");
            formValid[type === 'survey' ? 'surveyTags' : 'tags'] = false;
        } else if (tags.length > 100) {
            showError(field, errorLabel, "Les tags ne doivent pas dépasser 100 caractères");
            formValid[type === 'survey' ? 'surveyTags' : 'tags'] = false;
        } else if (!tags.match(/^[a-zA-Z0-9,\s]*$/)) {
            showError(field, errorLabel, "Les tags ne doivent contenir que des lettres, chiffres et virgules");
            formValid[type === 'survey' ? 'surveyTags' : 'tags'] = false;
        } else {
            const tagArray = tags.split(',').map(t => t.trim()).filter(t => t);
            const uniqueTags = new Set(tagArray);
            
            if (tagArray.length !== uniqueTags.size) {
                showError(field, errorLabel, "Les tags doivent être uniques");
                formValid[type === 'survey' ? 'surveyTags' : 'tags'] = false;
            } else if (tagArray.some(tag => tag.length > 20)) {
                showError(field, errorLabel, "Chaque tag ne doit pas dépasser 20 caractères");
                formValid[type === 'survey' ? 'surveyTags' : 'tags'] = false;
            } else {
                hideError(field, errorLabel);
                formValid[type === 'survey' ? 'surveyTags' : 'tags'] = true;
            }
        }
        updateSubmitButton();
    }

    function validateSurveyQuestion(question) {
        const field = document.getElementById('post_survey_question');
        const errorLabel = document.getElementById('survey-question-error');
        
        if (!question || question.trim() === '') {
            showError(field, errorLabel, "La question est requise");
            formValid.question = false;
        } else if (question.length > 200) {
            showError(field, errorLabel, "La question ne doit pas dépasser 200 caractères");
            formValid.question = false;
        } else {
            hideError(field, errorLabel);
            formValid.question = true;
        }
        updateSubmitButton();
    }

    function validateFile(input) {
        const errorLabel = document.getElementById('file-error');
        const file = input.files[0];
        const isEdit = document.getElementById('post_type').disabled;
        
        if (!isEdit) {
            if (!file) {
                showError(input, errorLabel, "Une image est requise");
                formValid.file = false;
            } else {
                const validTypes = ['image/jpeg', 'image/png'];
                if (!validTypes.includes(file.type)) {
                    showError(input, errorLabel, "Seuls les fichiers JPG ou PNG sont autorisés");
                    input.value = '';
                    formValid.file = false;
                } else {
                    hideError(input, errorLabel);
                    formValid.file = true;
                }
            }
        } else {
            formValid.file = true;
        }
        updateSubmitButton();
    }

    function updateSubmitButton() {
        const submitBtn = document.getElementById('submit-button');
        const type = document.getElementById('post_type').value;
        
        let isValid = formValid.type;
        
        if (type === 'announcement') {
            isValid = isValid && formValid.title && formValid.content && formValid.tags;
        } else if (type === 'survey') {
            isValid = isValid && formValid.question && formValid.surveyTags;
        }
        
        if (!document.getElementById('post_type').disabled) {
            isValid = isValid && formValid.file;
        }
        
        submitBtn.disabled = !isValid;
        submitBtn.classList.toggle('btn-disabled', !isValid);
    }

    function showError(field, errorLabel, message) {
        field.classList.remove('is-valid');
        field.classList.add('is-invalid');
        errorLabel.textContent = message;
        errorLabel.style.display = 'block';
        
        // Hide success message if exists
        const successLabel = document.getElementById(errorLabel.id.replace('-error', '-success'));
        if (successLabel) {
            successLabel.style.display = 'none';
        }
    }

    function hideError(field, errorLabel) {
        field.classList.remove('is-invalid');
        field.classList.add('is-valid');
        errorLabel.style.display = 'none';
        
        // Show success message if exists
        const successLabel = document.getElementById(errorLabel.id.replace('-error', '-success'));
        if (successLabel) {
            successLabel.style.display = 'block';
        }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        const type = document.getElementById('post_type').value;
        handlePostTypeChange(type);
    });
</script>