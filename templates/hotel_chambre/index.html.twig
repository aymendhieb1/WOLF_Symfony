{% extends 'base.html.twig' %}

{% block title %}Liste des Hôtels{% endblock %}

{% block body %}
    <div class="container py-4">
        <h1 class="mb-4">Nos Hôtels</h1>
        
        <div id="hotelList">
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-2">Chargement des hôtels...</p>
            </div>
        </div>
    </div>

<!-- Rating Modal -->
<div class="modal fade" id="ratingModal" tabindex="-1" aria-labelledby="ratingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ratingModalLabel">Noter l'hôtel</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="ratingForm">
                    <input type="hidden" name="_token" value="{{ csrf_token('rate') }}">
                    <div class="text-center mb-3">
                        <div class="rating">
                            {% for i in 1..5 %}
                                <i class="far fa-star rating-star" data-rating="{{ i }}"></i>
                            {% endfor %}
                        </div>
                        <div id="ratingMessage" class="mt-2"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="submit" form="ratingForm" class="btn btn-primary" id="confirmRating" disabled>Confirmer</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .rating {
        font-size: 40px;
        color: #ffd700;
    }
    .rating-star {
        cursor: pointer;
        transition: color 0.2s;
    }
    .rating-star:hover,
    .rating-star.selected {
        color: #ffd700;
    }
    .rating-star:not(.selected):not(:hover) {
        color: #ccc;
    }
    .rating-star:hover ~ .rating-star {
        color: #ccc;
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initial load of hotels
    loadHotels();

    // Price range slider
    const priceRange = document.getElementById('priceRange');
    const priceValue = document.getElementById('priceValue');
    
    if (priceRange && priceValue) {
        priceRange.addEventListener('input', function() {
            priceValue.textContent = this.value + '€';
        });
    }

    // Rating modal functionality
    const ratingModal = document.getElementById('ratingModal');
    const ratingForm = document.getElementById('ratingForm');
    const ratingStars = document.querySelectorAll('.rating-star');
    const confirmButton = document.getElementById('confirmRating');
    const ratingMessage = document.getElementById('ratingMessage');
    let selectedRating = 0;
    let currentHotelId = null;

    // Function to reset modal state
    function resetModal() {
        selectedRating = 0;
        ratingStars.forEach(star => star.classList.remove('selected'));
        confirmButton.disabled = true;
        ratingMessage.textContent = '';
        ratingMessage.className = 'mt-2';
    }

    // Star rating selection
    ratingStars.forEach(star => {
        star.addEventListener('click', function() {
            selectedRating = parseInt(this.dataset.rating);
            ratingStars.forEach(s => {
                s.classList.remove('selected');
                if (parseInt(s.dataset.rating) <= selectedRating) {
                    s.classList.add('selected');
                }
            });
            confirmButton.disabled = false;
        });
    });

    // Form submission
    ratingForm.addEventListener('submit', function(e) {
        e.preventDefault();
        if (!selectedRating || !currentHotelId) return;

        const formData = new FormData();
        formData.append('rating', selectedRating);
        formData.append('_token', this.querySelector('[name="_token"]').value);

        fetch(`/rating/${currentHotelId}/submit`, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                ratingMessage.textContent = 'Note enregistrée avec succès!';
                ratingMessage.className = 'mt-2 text-success';
                setTimeout(() => {
                    const modal = bootstrap.Modal.getInstance(ratingModal);
                    modal.hide();
                    loadHotels();
                }, 1500);
            } else {
                throw new Error(data.message || 'Une erreur est survenue');
            }
        })
        .catch(error => {
            ratingMessage.textContent = error.message || 'Une erreur est survenue lors de l\'envoi';
            ratingMessage.className = 'mt-2 text-danger';
        });
    });

    // Reset modal when it's hidden
    ratingModal.addEventListener('hidden.bs.modal', resetModal);

    // Make the openRatingModal function globally available
    window.openRatingModal = function(hotelId) {
        currentHotelId = hotelId;
        resetModal();
        
        // Check if user can rate
        fetch(`/rating/${hotelId}/check`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (!data.canRate) {
                ratingMessage.textContent = 'Vous avez déjà noté cet hôtel';
                ratingMessage.className = 'mt-2 text-warning';
                confirmButton.disabled = true;
            }
        })
        .catch(error => {
            ratingMessage.textContent = 'Une erreur est survenue lors de la vérification';
            ratingMessage.className = 'mt-2 text-danger';
            confirmButton.disabled = true;
        });

        const modal = new bootstrap.Modal(ratingModal);
        modal.show();
    };
});

// Load hotels with filters
window.loadHotels = function(page = 1) {
    const search = document.getElementById('searchInput')?.value || '';
    const sort = document.getElementById('sortSelect')?.value || 'default';
    const rating = document.getElementById('ratingFilter')?.value || '';
    const maxPrice = document.getElementById('priceRange')?.value || 1000;
    
    const url = new URL('{{ path("app_hotel_chambre_list") }}', window.location.origin);
    url.searchParams.set('page', page);
    url.searchParams.set('search', search);
    url.searchParams.set('sort', sort);
    url.searchParams.set('rating', rating);
    url.searchParams.set('maxPrice', maxPrice);
    
    fetch(url.toString(), {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.text())
    .then(html => {
        document.querySelector('#hotelList').innerHTML = html;
        // Scroll to top of the list
        document.querySelector('#hotelList').scrollIntoView({ behavior: 'smooth' });
    })
    .catch(error => {
        console.error('Error:', error);
        document.querySelector('#hotelList').innerHTML = `
            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading">Erreur</h4>
                <p>Une erreur est survenue lors du chargement des hôtels: ${error.message}</p>
                <hr>
                <p class="mb-0">
                    <button type="button" class="btn btn-outline-primary" onclick="loadHotels()">
                        <i class="fas fa-sync-alt"></i> Réessayer
                    </button>
                </p>
            </div>
        `;
    });
};
</script>
{% endblock %}