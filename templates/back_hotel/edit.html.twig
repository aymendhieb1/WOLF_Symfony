{% extends 'base1.html.twig' %}

{% block body %}
    <div class="main-panel">
        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header" style="background-color: #ff681a;">
                                <h4 class="card-title" style="color: white;">Modifier l'Hôtel</h4>
                            </div>
                            <div class="card-body">
                                {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'id': 'hotel-form'}}) }}
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            {{ form_label(form.nom) }}
                                            {{ form_widget(form.nom, {'attr': {'class': 'form-control'}}) }}
                                            <div class="invalid-feedback" id="nom-error"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            {{ form_label(form.localisation) }}
                                            {{ form_widget(form.localisation, {'attr': {'class': 'form-control', 'readonly': 'readonly'}}) }}
                                            <div class="invalid-feedback" id="localisation-error"></div>
                                        </div>
                                        <button type="button" class="btn" style="background-color: #ff681a; color: white;" onclick="showMap()">
                                            <i class="fas fa-map-marker-alt"></i> Select Location
                                        </button>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            {{ form_label(form.telephone) }}
                                            {{ form_widget(form.telephone, {'attr': {'class': 'form-control'}}) }}
                                            <div class="invalid-feedback" id="telephone-error"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            {{ form_label(form.email) }}
                                            {{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
                                            <div class="invalid-feedback" id="email-error"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            {{ form_label(form.image) }}
                                            {{ form_widget(form.image, {'attr': {'class': 'form-control'}}) }}
                                            <div class="invalid-feedback" id="image-error"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            {{ form_label(form.promotion) }}
                                            {{ form_widget(form.promotion, {'attr': {'class': 'form-control', 'min': '0', 'max': '100'}}) }}
                                            <div class="invalid-feedback" id="promotion-error"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            {{ form_label(form.description) }}
                                            {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 5}}) }}
                                            <div class="invalid-feedback" id="description-error"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <button type="submit" class="btn" style="background-color: #ff681a; color: white;">Enregistrer</button>
                                        <a href="{{ path('app_back_hotel_index') }}" class="btn btn-default">Retour à la liste</a>
                                    </div>
                                </div>
                                {{ form_end(form) }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
document.getElementById('hotel-form').addEventListener('submit', function(event) {
    let isValid = true;

    // Reset previous error states
    document.querySelectorAll('.invalid-feedback').forEach(function(el) {
        el.style.display = 'none';
    });
    document.querySelectorAll('.form-control').forEach(function(el) {
        el.classList.remove('is-invalid');
    });

    // Validate nom
    const nomInput = document.getElementById('{{ form.nom.vars.id }}');
    if (!nomInput.value) {
        nomInput.classList.add('is-invalid');
        document.getElementById('nom-error').textContent = 'Le nom est obligatoire';
        document.getElementById('nom-error').style.display = 'block';
        isValid = false;
    } else if (nomInput.value.length < 3) {
        nomInput.classList.add('is-invalid');
        document.getElementById('nom-error').textContent = 'Le nom doit contenir au moins 3 caractères';
        document.getElementById('nom-error').style.display = 'block';
        isValid = false;
    }

    // Validate localisation
    const localisationInput = document.getElementById('{{ form.localisation.vars.id }}');
    if (!localisationInput.value) {
        localisationInput.classList.add('is-invalid');
        document.getElementById('localisation-error').textContent = 'La localisation est obligatoire';
        document.getElementById('localisation-error').style.display = 'block';
        isValid = false;
    } else if (localisationInput.value.length < 5) {
        localisationInput.classList.add('is-invalid');
        document.getElementById('localisation-error').textContent = 'La localisation doit contenir au moins 5 caractères';
        document.getElementById('localisation-error').style.display = 'block';
        isValid = false;
    }

    // Validate telephone
    const telephoneInput = document.getElementById('{{ form.telephone.vars.id }}');
    if (!telephoneInput.value) {
        telephoneInput.classList.add('is-invalid');
        document.getElementById('telephone-error').textContent = 'Le numéro de téléphone est obligatoire';
        document.getElementById('telephone-error').style.display = 'block';
        isValid = false;
    } else if (!telephoneInput.value.match(/^[0-9+\s-]{8,20}$/)) {
        telephoneInput.classList.add('is-invalid');
        document.getElementById('telephone-error').textContent = 'Le numéro de téléphone n\'est pas valide';
        document.getElementById('telephone-error').style.display = 'block';
        isValid = false;
    }

    // Validate email
    const emailInput = document.getElementById('{{ form.email.vars.id }}');
    if (!emailInput.value) {
        emailInput.classList.add('is-invalid');
        document.getElementById('email-error').textContent = 'L\'email est obligatoire';
        document.getElementById('email-error').style.display = 'block';
        isValid = false;
    } else if (!emailInput.value.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
        emailInput.classList.add('is-invalid');
        document.getElementById('email-error').textContent = 'L\'email n\'est pas valide';
        document.getElementById('email-error').style.display = 'block';
        isValid = false;
    }

    // Validate description
    const descriptionInput = document.getElementById('{{ form.description.vars.id }}');
    if (!descriptionInput.value) {
        descriptionInput.classList.add('is-invalid');
        document.getElementById('description-error').textContent = 'La description est obligatoire';
        document.getElementById('description-error').style.display = 'block';
        isValid = false;
    } else if (descriptionInput.value.length < 10) {
        descriptionInput.classList.add('is-invalid');
        document.getElementById('description-error').textContent = 'La description doit contenir au moins 10 caractères';
        document.getElementById('description-error').style.display = 'block';
        isValid = false;
    }

    // Validate promotion
    const promotionInput = document.getElementById('{{ form.promotion.vars.id }}');
    if (promotionInput.value) {
        const promotionValue = parseFloat(promotionInput.value);
        if (isNaN(promotionValue) || promotionValue < 0 || promotionValue > 100) {
            promotionInput.classList.add('is-invalid');
            document.getElementById('promotion-error').textContent = 'La promotion doit être entre 0 et 100';
            document.getElementById('promotion-error').style.display = 'block';
            isValid = false;
        }
    }

    if (!isValid) {
        event.preventDefault();
    }
});

// Style the error messages
document.querySelectorAll('.invalid-feedback').forEach(function(el) {
    el.style.color = '#dc3545';
    el.style.display = 'none';
    el.style.marginTop = '0.25rem';
    el.style.fontSize = '80%';
});

let map;
let currentMarker; // Variable to hold the current marker

function showMap() {
    document.getElementById('map-section').style.display = 'block'; // Show the map section
    initializeMap(); // Initialize the map
}

function initializeMap() {
    if (!map) {
        map = L.map('map').setView([36.8065, 10.1815], 7); // Default view: Tunis
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);
    }

    // Add click event to map for selecting location
    map.off('click').on('click', function(e) {
        const lat = e.latlng.lat;
        const lon = e.latlng.lng;
        const localisationInput = document.getElementById('{{ form.localisation.vars.id }}');
        
        // Set the latitude and longitude in the localisation field
        localisationInput.value = `${lat}, ${lon}`;

        // Remove the previous marker if it exists
        if (currentMarker) {
            map.removeLayer(currentMarker);
        }

        // Add a new marker at the clicked location
        currentMarker = L.marker([lat, lon]).addTo(map)
            .bindPopup(`Selected Location: ${lat}, ${lon}`)
            .openPopup();
    });
}

function getCoordinates(address, name) {
    let url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&accept-language=fr`;

    fetch(url)
        .then(response => response.json())
        .then(data => {
            if (data.length > 0) {
                let lat = data[0].lat;
                let lon = data[0].lon;
                showLocation(lat, lon, name);
            } else {
                alert("Localisation introuvable pour : " + address);
            }
        })
        .catch(error => {
            console.error("Erreur API Nominatim : ", error);
            alert("Erreur lors de la récupération de la localisation.");
        });
}

function showLocation(lat, lon, name) {
    document.getElementById('map-section').style.display = 'block'; // Show map section
    document.getElementById('map-title').innerText = "Localisation de " + name; // Change title

    initializeMap();
    map.setView([lat, lon], 14); // Center map on the location

    // Remove the previous marker if it exists
    if (currentMarker) {
        map.removeLayer(currentMarker);
    }

    // Add a new marker at the location
    currentMarker = L.marker([lat, lon]).addTo(map)
        .bindPopup(`<b>${name}</b>`)
        .openPopup();
}
</script>

<!-- Section de la carte (cachée par défaut) -->
<section id="map-section" style="display: none; margin-top: 20px;">
    <div class="container">
        <h2 id="map-title" style="text-align: center;">Localisation</h2>
        <div id="map" style="height: 500px; width: 100%; margin-top: 10px; border-radius: 10px; border: 2px solid #75d893;"></div>
    </div>
</section>

<!-- Leaflet.js -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    .custom-carousel-control .carousel-control-prev-icon,
    .custom-carousel-control .carousel-control-next-icon {
        background-color: white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        border: 2px solid white;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        background-image: none;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .carousel-control-prev {
        left: -70px;
    }
    
    .carousel-control-next {
        right: -70px;
    }
    
    .custom-carousel-control .carousel-control-prev-icon::after {
        content: '\2039';
        font-size: 24px;
        color: #75d893;
        font-weight: bold;
    }
    
    .custom-carousel-control .carousel-control-next-icon::after {
        content: '\203A';
        font-size: 24px;
        color: #75d893;
        font-weight: bold;
    }

    .btn-outline-success {
        border-color: #75d893;
        color: #75d893;
    }

    .btn-outline-success:hover {
        background-color: #75d893;
        color: white;
    }

    #map-section {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 10px;
    }
</style>
{% endblock %} 